---
#define _GNU_SOURCE
#define _POSIX_C_SOURCE 200809L
#include <stdint.h>

#include <stdio.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <sys/syscall.h>
#include <sys/socket.h>
#include <netinet/in.h>

#ifndef RENAME_NOREPLACE
#define RENAME_NOREPLACE (1 << 0)
#endif

#ifndef RENAME_EXCHANGE
#define RENAME_EXCHANGE (1 << 1)
#endif

// these aren't properly re-exported
static const int _O_PATH = O_PATH;
static const int _AT_FDCWD = AT_FDCWD;
static const int _O_DIRECT = O_DIRECT;
static const int _O_NOATIME = O_NOATIME;
static const int _O_TMPFILE = O_TMPFILE;
static const int _AT_REMOVEDIR = AT_REMOVEDIR;
static const int _AT_EMPTY_PATH = AT_EMPTY_PATH;
static const int _RENAME_EXCHANGE = RENAME_EXCHANGE;
static const int _RENAME_NOREPLACE = RENAME_NOREPLACE;

// this has a completely mangled export in the default platform lib?
extern int eventfd(unsigned int initval, int flags);

// our glibc doesn't export this sys call
int memfd_create(const char *name, unsigned int flags) {
    return syscall(__NR_memfd_create, name, flags);
}

// equally not exported due to shenanigans
typedef int64_t off64_t;
extern off64_t lseek64(int fd, off64_t offset, int whence);

// GAI constants that arent exported...?
static const int _EAI_ADDRFAMILY = EAI_ADDRFAMILY;
static const int _EAI_NODATA = EAI_NODATA;

// default kotlin platform lib sockaddr_in6 is mangled
// so export our own, identical struct
struct wp_in6_addr {
    unsigned char addr[16];
};

typedef struct wp_sockaddr_in6 {
   sa_family_t     sin6_family;   /* AF_INET6 */
   in_port_t       sin6_port;     /* port number */
   uint32_t        sin6_flowinfo; /* IPv6 flow information */
   struct wp_in6_addr sin6_addr;     /* IPv6 address */
   uint32_t        sin6_scope_id; /* Scope ID (new in 2.4) */
};


// statx isn't exported by the really ancient glibc
struct statx_timestamp {
   int32_t tv_sec;    /* Seconds since the Epoch (UNIX time) */
   uint32_t tv_nsec;   /* Nanoseconds since tv_sec */
};

struct statx {
   uint32_t stx_mask;        /* Mask of bits indicating
                             filled fields */
   uint32_t stx_blksize;     /* Block size for filesystem I/O */
   uint64_t stx_attributes;  /* Extra file attribute indicators */
   uint32_t stx_nlink;       /* Number of hard links */
   uint32_t stx_uid;         /* User ID of owner */
   uint32_t stx_gid;         /* Group ID of owner */
   uint16_t stx_mode;        /* File type and mode */
   uint64_t stx_ino;         /* Inode number */
   uint64_t stx_size;        /* Total size in bytes */
   uint64_t stx_blocks;      /* Number of 512B blocks allocated */
   uint64_t stx_attributes_mask;
                          /* Mask to show what's supported
                             in stx_attributes */

   /* The following fields are file timestamps */
   struct statx_timestamp stx_atime;  /* Last access */
   struct statx_timestamp stx_btime;  /* Creation */
   struct statx_timestamp stx_ctime;  /* Last status change */
   struct statx_timestamp stx_mtime;  /* Last modification */

   /* If this file represents a device, then the next two
      fields contain the ID of the device */
   uint32_t stx_rdev_major;  /* Major ID */
   uint32_t stx_rdev_minor;  /* Minor ID */

   /* The next two fields contain the ID of the device
      containing the filesystem where the file resides */
   uint32_t stx_dev_major;   /* Major ID */
   uint32_t stx_dev_minor;   /* Minor ID */
   uint64_t stx_mnt_id;      /* Mount ID */
};

